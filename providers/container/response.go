package container

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"html/template"

	"github.com/kataras/iris/v12"
)

var (
	_Html, _ = base64.StdEncoding.DecodeString("")
	Html     = string(_Html)
)

type (
	Page struct {
		XMLName xml.Name    `xml:"root" json:"-"`
		Code    int         `json:"code" xml:"code"`
		Message string      `json:"message" xml:"message"`
		Page    int         `json:"page" xml:"page"`
		Total   int64       `json:"total" xml:"total"`
		Limit   int         `json:"limit" xml:"limit"`
		Data    interface{} `json:"data" xml:"data"`
	}
	Data struct {
		XMLName xml.Name    `xml:"root" json:"-"`
		Code    int         `xml:"code" json:"code"`
		Message string      `xml:"message" json:"message"`
		Data    interface{} `xml:"data" json:"data"`
	}
	Response struct {
		ctx      iris.Context
		err      error
		hasError bool
	}
)

func (r *Response) Context(ctx iris.Context) *Response {
	r.ctx = ctx
	return r
}

// Page 设置页面数据
func (r *Response) SetPage(data Page) *Response {
	buf := new(bytes.Buffer)
	tpl, err := template.New("html").Parse(Html)
	if err != nil {
		r.hasError = true
		r.err = err
		buf.Write([]byte(err.Error()))
	}
	var Json string
	jsonByte, err := json.Marshal(data)
	if err != nil {
		Json = err.Error()
	} else {
		Json = string(jsonByte)
	}
	err = tpl.Execute(buf, map[string]interface{}{
		"Code":    data.Code,
		"Message": data.Message,
		"Json":    Json,
	})
	if err != nil {
		r.hasError = true
		r.err = err
		buf.Write([]byte(err.Error()))
	}
	r.ctx.Negotiation().JSON(data).XML(data).HTML(buf.String()).EncodingGzip()
	return r
}

// SetData 设置输出数据
func (r *Response) SetData(data Data) *Response {
	buf := new(bytes.Buffer)
	tpl, err := template.New("html").Parse(Html)
	if err != nil {
		r.hasError = true
		r.err = err
		buf.Write([]byte(err.Error()))
	}
	var Json string
	jsonByte, err := json.Marshal(data)
	if err != nil {
		Json = err.Error()
	} else {
		Json = string(jsonByte)
	}
	err = tpl.Execute(buf, map[string]interface{}{
		"Code":    data.Code,
		"Message": data.Message,
		"Json":    Json,
	})
	if err != nil {
		r.hasError = true
		r.err = err
		buf.Write([]byte(err.Error()))
	}
	r.ctx.Negotiation().JSON(data).XML(data).HTML(buf.String()).EncodingGzip()
	return r
}

// Data 创建输出数据
func (r *Response) Data(code int, message string, data interface{}) *Response {
	d := &Data{
		Code:    code,
		Message: message,
		Data:    data,
	}
	buf := new(bytes.Buffer)
	tpl, err := template.New("html").Parse(Html)
	if err != nil {
		buf.Write([]byte(err.Error()))
	}
	var Json string
	jsonByte, err := json.MarshalIndent(d, "", "\t")
	if err != nil {
		Json = err.Error()
	} else {
		Json = string(jsonByte)
	}
	err = tpl.Execute(buf, map[string]interface{}{
		"Code":    d.Code,
		"Message": d.Message,
		"Json":    Json,
	})
	if err != nil {
		buf.Write([]byte(err.Error()))
	}
	r.ctx.Negotiation().JSON(d).XML(d).HTML(buf.String()).EncodingGzip()
	return r
}

// Send 输出数据
func (r *Response) Send() (int, error) {
	i, e := r.ctx.Negotiate(nil)
	if e != nil {
		r.ctx.Application().Logger().Error(e)
	}
	return i, e
}
